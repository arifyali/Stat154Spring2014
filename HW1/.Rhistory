{
g2 = lm(BODYFAT ~ ., bodyfat[,c(i,7,2,10, 5, 17,16,8)])
print((summary(g2))$coef)
}
for( i in c(6, 9,11:15))
{
g2 = lm(BODYFAT ~ ., bodyfat[,c(i,7,2,10, 5, 17,16,8,4)])
print((summary(g2))$coef)
}
for( i in c(6, 9,11, 13, 14,15))
{
g2 = lm(BODYFAT ~ ., bodyfat[,c(i,7,2,10, 5, 17,16,8,4, 12)])
print((summary(g2))$coef)
}
for( i in c(6, 9, 13, 14,15))
{
g2 = lm(BODYFAT ~ ., bodyfat[,c(i,7,2,10, 5, 17,16,8,4, 12,11)])
print((summary(g2))$coef)
}
library(leaps)
b=regsubsets(BODYFAT ~ ., bodyfat[, c(-1,-2)])
library(leaps)
b=regsubsets(BODYFAT ~ ., bodyfat[, c(-1,-3)])
rs = summary(b)
rs$adjr2
step(bf, direction = "backward", k=2)
step(bf)
step(bf, direction="both")
rs$cp
rs
names(rs)
rs$obj
rs$coeff
rs$coef
ls
m1= lm(formula = BODYFAT ~ AGE + WEIGHT + NECK + ABDOMEN + HIP +
THIGH + FOREARM + WRIST, data = bodyfat[, c(-1, -3)])
cv.scores = rep(-999, 1)
cv.scores[1] = sum((m1$residuals^2)/((1 - influence(m1)$hat)^2))
cv.scores
library(MASS)
sig = matrix(c(10, 2, 2, 0.5), 2, 2)
pc = mvrnorm(n = 100, c(0, 0), sig)
plot(pc[,1], pc[,1], type = "n", xlab = "X1", ylab = "X2")
points(pc[,1], pc[,2])
rgr = lm(pc[,2] ~ pc[,1])
abline(rgr)
help(influence)
influence(rgr)$hat
mean(influence(rgr)$hat)
sort(influence(rgr)$hat)
npc = rbind(pc, c(100, 5))
plot(npc[,1], npc[,2])
rgr1 = lm(npc[,2] ~ npc[,1])
abline(rgr1)
abline(rgr, col = "red")
influence(rgr1)$hat
mean(influence(rgr1)$hat)
sort(influence(rgr1)$hat)
npc = rbind(pc, c(100, 0))
plot(npc[,1], npc[,2])
rgr2 = lm(npc[,2] ~ npc[,1])
abline(rgr2)
abline(rgr, col = "red")
influence(rgr)$hat
mean(influence(rgr)$hat)
sort(influence(rgr)$hat)
npc = rbind(pc, c(100, -14))
plot(npc[,1], npc[,2])
rgr3 = lm(npc[,2] ~ npc[,1])
abline(rgr3)
abline(rgr, col = "red")
influence(rgr3)$hat
mean(influence(rgr3)$hat)
sort(influence(rgr3)$hat)
#Points that are only outliers in y do not have high leverage
npc = rbind(pc, c(0, -14))
plot(npc[,1], npc[,2])
rgr4 = lm(npc[,2] ~ npc[,1])
abline(rgr4)
abline(rgr, col = "red")
influence(rgr4)$hat
mean(influence(rgr4)$hat)
sort(influence(rgr4)$hat)
summary(rgr4)
par(mfrow = c(3,3))
for (i in 1:9) qqnorm(rnorm(50))
for (i in 1:9) qqnorm(exp(rnorm(50))) #lognormal--skewed
for (i in 1:9) qqnorm(rcauchy(50)) #Cauchy -- heavy-tailed (mean doesn't exist)
for (i in 1:9) qqnorm(runif(50)) #Uniform - bounded tails
par(mfrow = c(3,3))
for (i in 1:9) qqnorm(rnorm(50))
for (i in 1:9) qqnorm(exp(rnorm(50))) #lognormal--skewed
for (i in 1:9) qqnorm(rcauchy(50)) #Cauchy -- heavy-tailed (mean doesn't exist)
for (i in 1:9) qqnorm(runif(50)) #Uniform - bounded tails
par(mfrow=c(3,3))
for(i in 1:9) {x = rnorm(50); y = rnorm(50); ex <- lm(y~x); e = residuals(ex); f = fitted(ex); plot(f,e, main = "Constant Variance")}
for(i in 1:9) {x = rnorm(50); y = (1:50)*rnorm(50); ex <- lm(y~x); e = residuals(ex); f = fitted(ex); plot(f, e, main = "Heterogeneous Variance")}
for(i in 1:9) {x = rnorm(50); y = (1:50)*rnorm(50); ex <- lm(y~x); e = residuals(ex); f = fitted(ex); plot(x, e, main = "Heterogeneous Variance")}
for(i in 1:9) {x = rnorm(50); y = x + x*rnorm(50); ex<-lm(y~x); e = residuals(ex); f= fitted(ex); plot(f, e, main = "Variance prop. to (E(Y))^2")}
for(i in 1:9) {x = rnorm(50); y = x + sqrt(abs(x))*rnorm(50); ex <- lm(y~x); e = residuals(ex); f = fitted(ex); plot(f, e, main = "Variance prop. to E(Y)")}
for(i in 1:9) {x = rnorm(50); y = x + sqrt(abs(x))*rnorm(50); ex <- lm(y~x); e = residuals(ex); f = fitted(ex); plot(abs(x), e, main = "Variance prop. to E(Y)")}
for(i in 1:9) {x1 = rnorm(50); x2 = rnorm(50); y = x1/sqrt(2) + x2/sqrt(2) + rnorm(50); ex <- lm(y~x1); e = residuals(ex); plot(x2,e,main = "Missing Variable")}
for(i in 1:9) {x = rnorm(50); y = x/sqrt(2) + x^2/sqrt(2); ex <- lm(y~x); e = residuals(ex); f = fitted(ex); plot(f, e, main = "Nonlinearity")}
x = abs(rnorm(50))
y = sqrt(x) + rnorm(50)/(50*sd(x))
ex <- lm(y~x)
plot(y, x, xlab = "X", ylab = "Y")
plot(x, residuals(ex), xlab = "X", ylab = "residuals")
plot(fitted(ex), residuals(ex), xlab = "fitted", ylab = "residuals")
#We explore the Canadian Survey of Labour and Income Dynamics (SLID) data.
SLID <- read.table(
"http://socserv.socsci.mcmaster.ca/jfox/Books/Applied-Regression-2E/datasets/SLID-Ontario.txt",
header=TRUE)
str(SLID)
mod0 <- lm(compositeHourlyWages ~ sex + age + yearsEducation, data=SLID)
summary(mod0)
qqnorm(residuals(mod0), ylab = "residuals")
qqline(residuals(mod0))
qqPlot(mod0) #normal distribution for reference is fine since n = 3997
library("car")
qqPlot(mod0) #normal distribution for reference is fine since n = 3997
plot(density(rstudent(mod0))) #kernel density estimate; looks skewed.
plot(fitted(mod0), rstudent(mod0), col="gray")
abline(h=0, lty=2)
lines(lowess(fitted(mod0), rstudent(mod0)))
#Try a log transform
mod1 <- lm(log2(compositeHourlyWages) ~ sex + age + yearsEducation, data=SLID)
summary(mod1)
qqPlot(mod1)
plot(density(rstudent(mod1)))
# not perfect, but much better
plot(fitted(mod1), rstudent(mod1), col="gray")
abline(h=0, lty=2)
lines(lowess(fitted(mod1), rstudent(mod1)))
##Non-normality
crPlots(mod1, col=c("black", gray(0.85)))
# Pick which explanatory variable you want to explore. select zero to get out
mod2 <- lm(log2(compositeHourlyWages) ~ sex + age + I(age^2) + I(yearsEducation^2),
data=SLID)
library(leaps)
bodyfat = read.csv("~/Dropbox/School/Statistics/Stat 151a Fall 2013/Homework/Homework 1/BodyFat.csv")
bf = lm(BODYFAT ~ ., bodyfat[, c(-1, -3)])
summary(bf)
?asc
?read
x = read("Dropbox/MVZ/aet2009oct.asc")
x = read.table("Dropbox/MVZ/aet2009oct.asc")
View(x)
x = read.table("Dropbox/MVZ/aet2009sep.asc")
View(x)
x = read.table("Dropbox/MVZ/aet2009sep.asc")
y = read.table("Dropbox/MVZ/aet2009oct.asc")
head(x)
head(y)
?head
head(x, n =20)
head(y, n =20)
?predict
install.packages("raster")
install.packages("adehabitat")
library(adehabitat)
asc = import.asc("Dropbox/MVZ/aet2009sep.asc")
asc = import.asc("Dropbox/MVZ/aet2009sep.asc")
library(raster)
raster = raster(x)
head(x)
library(raster)
raster = raster(x = x)
?raster
ascdemo = x
raster(ascdemo)
asc = import.asc("Dropbox/MVZ/aet2009oct.asc")
asc = import.asc("Dropbox/MVZ/aet2009sep.asc")
?import.asc
checkin = as.matrix(x)
View(checkin)
x = import.asc("Dropbox/MVZ/aet2009sep.asc")
library(adehabitat)
library(adehabitat)
library(adehabitat)
x = import.asc("Dropbox/MVZ/aet2009sep.asc")
library(raster)
raster("Dropbox/MVZ/aet2009oct.asc")
x = raster("Dropbox/MVZ/aet2009oct.asc")
dim(x)
x[[[1]]]
class(x)
x$aet2009oct
?raster
dim(X)
dim(x)
dim[1]
class(x)
x1 = as.data.frame(x)
View(`x1`)
xmean = mean(x1)
xmean = mean(x)
dropLayer(x, 1)
zoom(x)
zoom(x, 1)
zoom(x, 4)
zoom(x, 3)
unique(x1)
length(unique(x1))
x = unique(x1)
mean(x)
x = x[!is.na(x)]
mean(x)
library(raster)
x = raster("Dropbox/MVZ/aet2009oct.asc")
x1 = as.data.frame(x)
y = raster("Dropbox/MVZ/aet2009sep.asc")
y1 = as.data.frame(x)
xunique = (unique(x1))
xunique = as.vector(unique(x1))
yunique = as.vector(unique(y1))
head(xunique)
head(yunique)
?OpenStreetMap
plot(X)
plot(raster(X))
plot(raster(x))
z=raster("Dropbox/MVZ/aet2010apr.asc")
z1 = as.data.frame(z)
x = raster("Dropbox/MVZ/aet2009oct.asc")
y = raster("Dropbox/MVZ/aet2009sep.asc")
z=raster("Dropbox/MVZ/aet2010apr.asc")
library(raster)
x = raster("Dropbox/MVZ/aet2009oct.asc")
y = raster("Dropbox/MVZ/aet2009sep.asc")
z=raster("Dropbox/MVZ/aet2010apr.asc")
?maxent
??maxent
z1 = as.data.frame(z)
library(raster)
x = raster("Dropbox/MVZ/aet2009oct.asc")
x1 = as.data.frame(x)
xuni = unique(x)
y = raster("Dropbox/MVZ/aet2009sep.asc")
y1 = as.data.frame(y)
yuni = unique(y)
z=raster("Dropbox/MVZ/aet2010apr.asc")
z1 = as.data.frame(z)
head(xuni)
head(yuni)
head(zuni)
zuni = unique(z)
head(zuni)
length(xuni)
length(yuni)
length(zuni)
paste("Dropbox/MVZ/aet", 1000, "apr")
paste("Dropbox/MVZ/aet", 1000, "apr", sep="")
paste("Dropbox/MVZ/aet", 1000, "apr", "asc", sep="")
zzz = paste("Dropbox/MVZ/aet", 2010, "apr", ".asc", sep="")
zz
zzz
zz = raster(zzz)
zz1 =  as.data.frame(zz)
months
month
month.abb
zzzz = raster(paste("Dropbox/MVZ/aet", 2010, month.abb[4], ".asc", sep=""))
zzzz1 = as.data.frame(zzzz)
month.abb[1] = a
month.abb[1] = "a"
month.abb
names(month.abb) = month.abb
month.abb
month.abb = rep(0, times=12)
month.abb
names(month) = month.abb
month = rep(0, times=12)
names(month) = month.abb
month
0 + NA
library(raster)
x = raster("Dropbox/MVZ/aet2009oct.asc")
x1 = as.data.frame(x)
xuni = unique(x)
y = raster("Dropbox/MVZ/aet2009sep.asc")
y1 = as.data.frame(y)
yuni = unique(y)
z=raster("Dropbox/MVZ/aet2010apr.asc")
z1 = as.data.frame(z)
zuni = unique(z)
month = rep(0, times=12)
x
ncell(x)
x[,,1]
x[1,,]
x[,1,]
z1 = as.matrix(z)
dim(z1)
head(z1)
vtm_fia = write.csv("Dropbox/MVZ/Rasterfarian/vtm_fia_combined.csv")
vtm_fia = read.csv("Dropbox/MVZ/Rasterfarian/vtm_fia_combined.csv")
names(vtm_fia)
vtm_fia = vtm_fia[vtm_fia$lon == !is.na(vtm_fia$lo), ]
vtm_fia = read.csv("Dropbox/MVZ/Rasterfarian/vtm_fia_combined.csv")
vtm_fia = vtm_fia[vtm_fia$lon == !is.na(vtm_fia$lon), ]
View(vtm_fia)
vtm_fia = read.csv("Dropbox/MVZ/Rasterfarian/vtm_fia_combined.csv")
vtm_fia = vtm_fia[vtm_fia$lon =! NA, ]
vtm_fia = vtm_fia[vtm_fia$lon != NA, ]
vtm_fia = read.csv("Dropbox/MVZ/Rasterfarian/vtm_fia_combined.csv")
vtm_fia = vtm_fia[!is.na(vtm_fia$lon), ]
View(vtm_fia)
vtm_fia = vtm_fia[!is.na(vtm_fia$lat), ]
vtm_fia = read.csv("Dropbox/MVZ/Rasterfarian/vtm_fia_combined.csv")
vtm_fia = vtm_fia[!is.na(vtm_fia$lon), ]
vtm_fia = vtm_fia[!is.na(vtm_fia$lat), ]
View(vtm_fia)
1920:1950
yearsofhistoric = 1920:1950
yearsofhistoric[-c(7)]
c(1:length(30))[-c(7)]
(c(1:length(30)))[-c(7)]
?read.txt
?read.text
?readLines
StatVillage_raw = readLines("Dropbox/School/Statistics/Stat 152 Spring 2014/hw1/StatVillage_raw.txt")
?read.csv
StatVillage_raw = read.table("Dropbox/School/Statistics/Stat 152 Spring 2014/hw1/StatVillage_raw.txt")
StatVillage_raw = read.csv("Dropbox/School/Statistics/Stat 152 Spring 2014/hw1/StatVillage_raw.txt")
View(StatVillage_raw)
StatVillage_raw = read.table("Dropbox/School/Statistics/Stat 152 Spring 2014/hw1/StatVillage_raw.txt")
View(StatVillage_raw)
install.packages("rmr")
library("kernlab")
library("cluster")
cancer.mediod=pam(cancer,14,diss= FALSE,metric="manhattan",do.swap=FALSE)#,cluster.only=TRUE,do.swap=FALSE)
cancer <- read.table("/var/folders/l8/w7gpklcj3nj54ww3s71l4fs80000gp/T//RtmpwpJDs4/data7d06e36be1f", quote="\"")
View(cancer)
save.image("~/Dropbox/School/Statistics/Stat 154 Spring 2014/HW1/cancer.RData")
library("kernlab")
library("cluster")
cancer.mediod=pam(cancer,14,diss= FALSE,metric="manhattan",do.swap=FALSE)#,cluster.only=TRUE,do.swap=FALSE)
plot(cancer.mediod)
plot(cancer.means$cluster)
cancer.means=kmeans(cancer,14,nstart=10)
length(cancer.means$cluster)
plot(cancer.means$cluster)
plot(cancer.mediod)
aa = runif(150, 0, 2*pi)
ax = 5*cos(aa) + rnorm(150, 0, 0.25)
ay = 5*sin(aa) + rnorm(150, 0, 0.25)
bb = runif(150, 0, 2*pi)
bx = 2.8*cos(bb) + rnorm(150, 0, 0.25)
by = 2.8*sin(bb) + rnorm(150, 0, 0.25)
cc =  runif(150, 0, 2*pi)
cx = cos(cc) + rnorm(150, 0, 0.25)
cy = sin(cc) + rnorm(150, 0, 0.25)
plot(x = ax, y = ay)
points(x = bx, y = by)
points(x = cx, y = cy)
specc
?specc
?plot
?h.clust
library("cluster")
library("kernlab")
?h.clust
?hclust
?prcomp
?specc
Problem3 = specc(data.frame(c(ax, bx, cx), c(ay, by, cy)), centers = 3)
Problem3 = specc(data.frame(c(ax, bx, cx), c(ay, by, cy)), centers = 3, kernel = "rbfdot")
data.frame(c(ax, bx, cx), c(ay, by, cy)
)
Problem3 = specc(combined.points, centers = 3, kernel = "rbfdot")
combined.points = data.frame(c(ax, bx, cx), c(ay, by, cy))
Problem3 = specc(combined.points, centers = 3, kernel = "rbfdot")
Problem3 = specc(combined.points, 3, kernel = "rbfdot")
combined.points = data.frame(ax, bx, cx, ay, by, cy)
Problem3 = specc(combined.points, 3, kernel = "rbfdot")
Problem3 = specc(combined.points, 3)
Problem4
Problem3
Problem3 = specc(combined.points, 3, kernel = "rbfdot")
combined.points
Problem3 = specc(combined.points, 3, kernal = "rbfdot")
Problem3
combined.points = data.frame(ax, bx, cx, ay, by, cy)
combined.points = as.matrix(combined.points)
Problem3 = specc(combined.points, 3)
Problem3
Problem3.kpca = kpca(combined.points, kernel = "rbfdot")
Problem3.kpca
combined.points = data.frame(c(ax, bx, cx), c(ay, by, cy))
combined.points = as.matrix(combined.points)
Problem3 = specc(combined.points, 3)
plot(combined.points,col=Problem3)
Problem3 = specc(combined.points, 3,kernel = "rbfdot")
plot(combined.points,col=Problem3)
Problem3.kpca = kpca(combined.points, kernel = "rbfdot")
plot(Problem3.kpca)
plot(combined.points)
Problem3.kpca = kpca(combined.points, kernel = "rbfdot")
plot(rotated(Problem3.kpca))
Problem3.pca = prcomp(combined.points,retx=TRUE)
plot(Problem3.pca)
plot(Problem3.pca$x)
Problem5 = data.frame(rnorm(10000, 0, 5))
for(i in 2:5){
Problem5[, i] = c(Problem5[9001:10000, 1], rnorm(9000, 0, 5))
}
prcomp(Problem5)$rotation
Problem5[, 6] = rnorm(10000, 0, 1)
prcomp(Problem5)$rotation
Problem5[, 7] = rnorm(10000, 0, 2)
prcomp(Problem5)$rotation
Problem1.2 = hclust(dist(X, method = "manhattan"))
dates = sp500Components$date[84:84+365]
setwd("Dropbox/School/Statistics/Stat 154 Spring 2014/HW1/")
SP500 = read.csv("sp500Data.csv")
sp500Components = read.csv("bf4024f5c75fc062.csv")
#Rt =St/St 1 1
DailyReturns = c()
tick = unique(sp500Components$TICKER)
for(i in 1:length(unique(sp500Components$TICKER))){
Ticker = sp500Components[sp500Components$TICKER == tick[i], ]
uniquediff = (Ticker$PRC[2:length(Ticker$PRC)]/Ticker$PRC[1:(length(Ticker$PRC)-1)])-1
DailyReturns = c(DailyReturns, 0, uniquediff)
}
sp500Components$DailyReturns = DailyReturns
problem1 = sp500Components[, c("BIDLO", "ASKHI", "VOL", "OPENPRC", "NUMTRD", "DailyReturns")]
problem1 = na.omit(problem1)
problem1 = prcomp(problem1, scale=T)
#Because the Mean not equal to 0, scale=T
problem1$rotation
#                    PC1          PC2           PC3           PC4           PC5           PC6
# BIDLO         0.5701116434  0.089078735 -0.0002062798  0.0218217762  7.643797e-01  0.2868539175
# ASKHI         0.5700385209  0.089997837 -0.0002350854  0.0144604427 -6.306924e-01  0.5186274850
# VOL          -0.1311507964  0.692890220  0.0013111857  0.7090065758 -3.244605e-03  0.0002001361
# OPENPRC       0.5700748738  0.089714437 -0.0004380042  0.0173918177 -1.338769e-01 -0.8054441440
# NUMTRD       -0.0885574273  0.704143999  0.0002837167 -0.7045008131  4.160755e-03 -0.0001516990
# DailyReturns  0.0006983944 -0.001029459  0.9999989553 -0.0007142428 -4.615539e-05 -0.0001719136
plot(problem1$x)
screeplot(problem1)
####Problem 1.2
dates = sp500Components$date[84:84+365]
start =sp500Components$TICKER[which(sp500Components$date == sp500Components$date[84])]
end = sp500Components$TICKER[which(sp500Components$date == sp500Components$date[84+365])]
companies = start[start[1:length(end)] == end]
num.comp =sum(start[1:length(end)] == end)
X = matrix(rep(0,num.comp*365), nrow=num.comp, ncol=365)
for (i in 1:num.comp){
X[i,] = sp500Components$DailyReturns[which(sp500Components$TICKER == companies[i])[84:84+365]]
}
rownames(X) = companies[1:num.comp]
Problem1.2 = hclust(dist(X, method = "manhattan"))
plot(Problem1.2)
Problem4 = data.frame(rnorm(10000, 0, 1))
for(i in 2:10){
Problem4[,i]= rnorm(10000, 0, i)
}
screeplot(prcomp(Problem4))
Prob4bad = data.frame(rnorm(10000, 0, 1))
for(i in 2:10){
Prob4bad[,i]= rnorm(10000, 0, 1)
}
screeplot(prcomp(Prob4bad))
Problem5 = data.frame(rnorm(10000, 0, 5))
for(i in 2:5){
Problem5[, i] = c(Problem5[9001:10000, 1], rnorm(9000, 0, 5))
}
prcomp(Problem5)$rotation
Problem5[, 6] = rnorm(10000, 0, 1)
prcomp(Problem5)$rotation
Problem5[, 7] = rnorm(10000, 0, 2)
prcomp(Problem5)$rotation
Problem5 = data.frame(V1=rnorm(10000, 0, 5))
for(i in 2:5){
Problem5[, i] = c(Problem5[9001:10000, 1], rnorm(9000, 0, 5))
}
prcomp(Problem5)$rotation
Problem5[, 6] = rnorm(10000, 0, 1)
prcomp(Problem5)$rotation
Problem5[, 7] = rnorm(10000, 0, 2)
prcomp(Problem5)$rotation
library("cluster")
cancermediod=pam(cancer,14,diss= FALSE,metric="manhattan",do.swap=FALSE)#,cluster.only=TRUE,do.swap=FALSE)
plot(cancer.mediod)
length(cancer.means$cluster)
plot(cancer.means$cluster)
####Problem 3
aa = runif(150, 0, 2*pi)
ax = 5*cos(aa) + rnorm(150, 0, 0.25)
ay = 5*sin(aa) + rnorm(150, 0, 0.25)
bb = runif(150, 0, 2*pi)
bx = 2.8*cos(bb) + rnorm(150, 0, 0.25)
by = 2.8*sin(bb) + rnorm(150, 0, 0.25)
cc =  runif(150, 0, 2*pi)
cx = cos(cc) + rnorm(150, 0, 0.25)
cy = sin(cc) + rnorm(150, 0, 0.25)
plot(x = ax, y = ay)
points(x = bx, y = by)
points(x = cx, y = cy)
combined.points = data.frame(c(ax, bx, cx), c(ay, by, cy))
combined.points = as.matrix(combined.points)
Problem3 = specc(combined.points, 3,kernel = "rbfdot")
plot(combined.points)
Problem3.kpca = kpca(combined.points, kernel = "rbfdot")
plot(rotated(Problem3.kpca))
Problem3.pca = prcomp(combined.points,retx=TRUE)
plot(Problem3.pca$x)
Problem3 = kpca(combined.points, kernel = "rbfdot")
plot(rotated(Problem3))
Problem3.pca = prcomp(combined.points,retx=TRUE)
plot(Problem3.pca$x)
