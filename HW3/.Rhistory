X.lm
plot(X, Y, pch = 20)
y = X^3*X.lm$coefficients[4] + X^2*X.lm$coefficients[3] + (X)*X.lm$coefficients[2] + 1*X.lm$coefficients[1]
X.x = X[order(X)]
y = y[order(X)]
points(X.x, y, type="l", col = "red")
CI.X.lm = predict(X.lm, data.frame(X.x,y), interval="confidence")
upper.CI = 1.96*(CI.X.lm[,3]-CI.X.lm[,1]) + CI.X.lm[,1]
lower.CI = 1.96*(CI.X.lm[,2]-CI.X.lm[,1]) + CI.X.lm[,1]
points(X.x, upper.CI[order(X)],type="l", col = "blue")
points(X.x, lower.CI[order(X)],type="l", col = "blue")
X = rnorm(30, 0,1)
Y = 0 + 1*X + 2*X^2 + 3*X^3 + rnorm(30, 0, 1)
X.lm = lm(Y~1+X+I(X^2)+I(X^3))
X.lm
#  Coefficients:
# (Intercept)            X       I(X^2)       I(X^3)
#      51.421       -1.154        2.030        3.000
plot(X, Y, pch = 20)
y = X^3*X.lm$coefficients[4] + X^2*X.lm$coefficients[3] + (X)*X.lm$coefficients[2] + 1*X.lm$coefficients[1]
X.x = X[order(X)]
y = y[order(X)]
points(X.x, y, type="l", col = "red")
CI.X.lm = predict(X.lm, data.frame(X.x,y), interval="confidence")
upper.CI = 1.96*(CI.X.lm[,3]-CI.X.lm[,1]) + CI.X.lm[,1]
lower.CI = 1.96*(CI.X.lm[,2]-CI.X.lm[,1]) + CI.X.lm[,1]
points(X.x, upper.CI[order(X)],type="l", col = "blue")
points(X.x, lower.CI[order(X)],type="l", col = "blue")
install.packages("knn")
library("FNN", lib.loc="/Users/arifali/Library/R/3.0/library")
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTrain$V1[ZipTrain$V1== 2] = 0
ZipTrain$V1[ZipTrain$V1== 3] = 1
ZipTrain = na.omit(ZipTrain)
Problem2 = glm(V1~., data=ZipTrain)
conf = matrix(0,nrow=21,ncol=5)
colnames(conf) = c("thr","a","b","c","d")
conf[,1] = seq(0,1,by=.05)
conf[,1]
y = ZipTrain$V1
y
yhat = Problem2$fitted
names(yhat)=NULL
for ( i in 1:nrow(conf))
{
a = sum(y & (yhat<=conf[i,1]))
b = sum(y & (yhat>conf[i,1]))
c = sum(y & (yhat<=conf[i,1]))
d = sum(y & (yhat>conf[i,1]))
conf[i,2:5] = c(a,b,c,d)
}
plot(conf[,1],conf[,3]+conf[,4], xlab="threshold", ylab="b+c")
min(conf)
min(conf[,3]+conf[,4])
thr = conf[conf[,3]+conf[,4] == min(conf[,3]+conf[,4]) , c("thr")]
thr
ZipTest = ZipTest[ZipTest$V1== 2 | ZipTest$V1== 3, ]
aa = ZipTest[, -1]
predicted.zip = predict(Problem2, aa, type="response")
predicted.zip[predicted.zip<thr] = 2
predicted.zip[predicted.zip>=thr] = 3
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
setwd("~/Dropbox/School/Statistics/Stat 154 Spring 2014/HW3")
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTrain$V1[ZipTrain$V1== 2] = 0
ZipTrain$V1[ZipTrain$V1== 3] = 1
ZipTrain = na.omit(ZipTrain)
Problem2 = glm(V1~., data=ZipTrain)
conf = matrix(0,nrow=21,ncol=5)
colnames(conf) = c("thr","a","b","c","d")
conf[,1] = seq(0,1,by=.05)
conf[,1]
y = ZipTrain$V1
y
yhat = Problem2$fitted
names(yhat)=NULL
for ( i in 1:nrow(conf))
{
a = sum(y & (yhat<=conf[i,1]))
b = sum(y & (yhat>conf[i,1]))
c = sum(y & (yhat<=conf[i,1]))
d = sum(y & (yhat>conf[i,1]))
conf[i,2:5] = c(a,b,c,d)
}
plot(conf[,1],conf[,3]+conf[,4], xlab="threshold", ylab="b+c")
min(conf)
min(conf[,3]+conf[,4])
thr = conf[conf[,3]+conf[,4] == min(conf[,3]+conf[,4]) , c("thr")]
thr
ZipTest = ZipTest[ZipTest$V1== 2 | ZipTest$V1== 3, ]
aa = ZipTest[, -1]
predicted.zip = predict(Problem2, aa, type="response")
predicted.zip[predicted.zip<thr] = 2
predicted.zip[predicted.zip>=thr] = 3
knn(ZipTrain[,-1], aa, ZipTrain$V1, k =1)
onenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =1)
threenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =3)
fivenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =5)
sevennn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =7)
fifteen = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =15)
sum(as.numeric(onenn) == ZipTest[,1])/length(ZipTest[,1])*100
sum(as.numeric(onenn) == ZipTest[,1])/length(ZipTest[,1])
sum(as.numeric(threenn) == ZipTest[,1])/length(ZipTest[,1])
sum(as.numeric(fivenn) == ZipTest[,1])/length(ZipTest[,1])
sum(as.numeric(sevennn) == ZipTest[,1])/length(ZipTest[,1])
sum(as.numeric(fifteen) == ZipTest[,1])/length(ZipTest[,1])
as.numeric(onenn) == ZipTest[,1]
setwd("Dropbox/School/Statistics/Stat 154 Spring 2014/HW3")
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTrain = na.omit(ZipTrain)
Problem2 = glm(V1~., data=ZipTrain)
conf = matrix(0,nrow=21,ncol=5)
colnames(conf) = c("thr","a","b","c","d")
conf[,1] = seq(0,1,by=.05)
conf[,1]
y = ZipTrain$V1
y
yhat = Problem2$fitted
names(yhat)=NULL
for ( i in 1:nrow(conf))
{
a = sum(y & (yhat<=conf[i,1]))
b = sum(y & (yhat>conf[i,1]))
c = sum(y & (yhat<=conf[i,1]))
d = sum(y & (yhat>conf[i,1]))
conf[i,2:5] = c(a,b,c,d)
}
plot(conf[,1],conf[,3]+conf[,4], xlab="threshold", ylab="b+c")
min(conf)
min(conf[,3]+conf[,4])
thr = conf[conf[,3]+conf[,4] == min(conf[,3]+conf[,4]) , c("thr")]
thr
ZipTest = ZipTest[ZipTest$V1== 2 | ZipTest$V1== 3, ]
aa = ZipTest[, -1]
predicted.zip = predict(Problem2, aa, type="response")
predicted.zip[predicted.zip<thr] = 2
predicted.zip[predicted.zip>=thr] = 3
onenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =1)
threenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =3)
library("FNN")
onenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =1)
threenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =3)
fivenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =5)
sevennn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =7)
fifteen = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =15)
sum(onenn == ZipTest$V1)/length(ZipTest$V1)
onenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =1)
sum(onenn == ZipTest$V1)/length(ZipTest$V1)
threenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =3)
sum(threenn == ZipTest$V1)/length(ZipTest$V1)
fivenn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =5)
sum(fivenn == ZipTest$V1)/length(ZipTest$V1)
sevennn = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =7)
sum(sevennn == ZipTest$V1)/length(ZipTest$V1)
fifteen = knn(ZipTrain[,-1], aa, ZipTrain$V1, k =15)
sum(fifteen == ZipTest$V1)/length(ZipTest$V1)
setwd("Dropbox/School/Statistics/Stat 154 Spring 2014/HW3")
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTrain = read.table(file="zip.train", header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTrain = na.omit(ZipTrain)
Problem2 = lm(V1~., data=ZipTrain)
Problem2
summary(Problem2)
summary(Problem2)$Coefficients[,1]
summary(Problem2)$Coefficients
summary(Problem2)$coefficients
summary(Problem2)$coefficients[,1]
Test.yhat = c()
for(i in 1:nrows(ZipTest){
for(i in 1:nrows(ZipTest)){
Test.yhat[i] = sum(Problem2$coefficients*ZipTest[i, -1])}
for(i in 1:nrow(ZipTest)){
Test.yhat[i] = sum(Problem2$coefficients*ZipTest[i, -1])}
Test.yhat = c()
for(i in 1:nrow(ZipTest)){
Test.yhat[i] = sum(Problem2$coefficients*t(ZipTest)[i, -1])}
Testing = t(ZipTest[, -1])
View(Testing)
Test.yhat = c()
for(i in 1:nrow(Testing)){
Test.yhat[i] = sum(Problem2$coefficients[-1]*Testing[,i]+Problem2$coefficients[1]}
Test.yhat = c()
for(i in 1:nrow(Testing)){
Test.yhat[i] = sum(Problem2$coefficients[-1]*Testing[,i]+Problem2$coefficients[1])}
Test.yhat = c()
for(i in 1:nrow(Testing)){
Test.yhat[i] = Problem2$coefficients[-1]*Testing[,i]}
warnings()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[-1]*Testing[,i]}
warnings()
length(Problem2$coefficients[-1])
length(Testing[,1])
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = (Problem2$coefficients[-1])*(Testing[,i])}
Test.yhat
for(i in 1:ncol(Testing)){
Test.yhat[i] = sum(Problem2$coefficients[-1])*(Testing[,i])}
warnings()
ncol(Testing)
length(Testing[,2])
length(Testing[,2007])
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i])}
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat
round(Test.yhat[1])
round(Test.yhat[4])
round(Test.yhat)
Test.yhat = round(Test.yhat)
sum(Test.yhat[Test.yhat>3])
Test.yhat = round(Test.yhat)
Test.yhat[Test.yhat>3] = 3
Test.yhat[Test.yhat<2] = 2
Test.yhat
sum(ZipTrain$V1==Test.yhat)/length(Test.yhat)
length(Test.yhat)
length(ZipTrain$V1)
sum(ZipTest$V1==Test.yhat)/length(Test.yhat)
Test.yhat = round(Test.yhat)
sum(ZipTest$V1==Test.yhat)/length(Test.yhat)
Test.yhat
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat[Test.yhat>3] = 3
Test.yhat[Test.yhat<2] = 2
sum(ZipTest$V1==Test.yhat)/length(Test.yhat)
Test.yhat = round(Test.yhat)
Test.yhat[Test.yhat>3] = 3
Test.yhat[Test.yhat<2] = 2
sum(ZipTest$V1==Test.yhat)/length(Test.yhat)
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTrain = na.omit(ZipTrain)
Problem2 = glm(V1~., data=ZipTrain)
summary(Problem2)$coefficients[,1]#errors
Testing = t(ZipTest[, -1])
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat = round(Test.yhat)
Test.yhat[Test.yhat>3] = 3
Test.yhat[Test.yhat<2] = 2
sum(ZipTest$V1==Test.yhat)/length(Test.yhat)
error.for.test = function(Ziptest){Testing = t(ZipTest[, -1])
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat = round(Test.yhat)
Test.error = sum(ZipTest$V1==Test.yhat)/length(Test.yhat)
return(Test.error)}
error.for.test(ZipTrain)
error.for.test(ZipTest)
error.for.test = function(ZipTest){Testing = t(ZipTest[, -1])
print(dim(Testing))
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat = round(Test.yhat)
Test.error = sum(ZipTest$V1==Test.yhat)/length(Test.yhat)
return(Test.error)}
error.for.test(ZipTrain)
error.for.test(ZipTest)
error.for.test = function(ZipTest){Testing = t(ZipTest[, -1])
print(dim(Testing))
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat = round(Test.yhat)
Test.error = mean(ZipTest$V1-Test.yhat)^2
return(Test.error)}
error.for.test(ZipTrain)
error.for.test(ZipTest)
?apply
library("FNN")
Train.error.k1 = mean(ZipTrain$V1-knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =1))^2
onenn = knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =1)
onenn
Train.error.k1 = mean(ZipTrain$V1-as.numeric(knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =1))^2
)
Train.error.k1 = mean(ZipTrain$V1-as.numeric(knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =1)))^2
Train.error.k1
Test.error.k1 = mean(ZipTest$V1-as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =1))^2
)
Test.error.k1 = mean(ZipTest$V1-as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =1)))^2
Test.error.k1
Train.error.k3 = mean(ZipTrain$V1-as.numeric(knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =3)))^2
Test.error.k3 = mean(ZipTest$V1-as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =3)))^2
Train.error.k3
Test.error.k3
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTest = ZipTest[ZipTest$V1== 2 | ZipTest$V1== 3, ]
ZipTrain = na.omit(ZipTrain)
Problem2 = glm(V1~., data=ZipTrain)
summary(Problem2)$coefficients[,1]#errors
error.for.test = function(ZipTest){Testing = t(ZipTest[, -1])
print(dim(Testing))
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat = round(Test.yhat)
Test.error = mean(ZipTest$V1-Test.yhat)^2
return(Test.error)}
error.for.test(ZipTrain)
error.for.test(ZipTest)
k.error.train.test = function(k){
Train.error.k = mean(ZipTrain$V1-as.numeric(knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =k)))^2
Test.error.k = mean(ZipTest$V1-as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =k)))^2
return(data.frame(Train.error.k, Test.error.k))
}
k.error.train.test(1)
k.error.train.test(3)
k.error.train.test(5)
k.error.train.test(7)
k.error.train.test(15)
error.for.test = function(ZipTest){Testing = t(ZipTest[, -1])
print(dim(Testing))
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat = round(Test.yhat)
Test.error = sum(ZipTest$V1==Test.yhat)/length(ZipTest$V1)
return(Test.error)}
error.for.test(ZipTrain)
error.for.test(ZipTest)
k.error.train.test = function(k){
Train.error.k = sum(ZipTrain$V1==as.numeric(knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =k)))/length(ZipTrain$V1)
Test.error.k = sum(ZipTest$V1==as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =k)))/length(ZipTest$V1)
return(data.frame(Train.error.k, Test.error.k))
}
k.error.train.test(1)
k.error.train.test(3)
k.error.train.test(5)
k.error.train.test(7)
k.error.train.test(15)
as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =3))
as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =7))
ZipTrain$V1
as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =1))
as.numeric(knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =1))
ZipTrain = read.table(file="zip.train", header=F)
ZipTest = read.table('zip.test', header=F)
ZipTrain = ZipTrain[ZipTrain$V1== 2 | ZipTrain$V1== 3, ]
ZipTest = ZipTest[ZipTest$V1== 2 | ZipTest$V1== 3, ]
ZipTrain = na.omit(ZipTrain)
Problem2 = glm(V1~., data=ZipTrain)
summary(Problem2)$coefficients[,1]#errors
error.for.test = function(ZipTest){Testing = t(ZipTest[, -1])
print(dim(Testing))
Test.yhat = c()
for(i in 1:ncol(Testing)){
Test.yhat[i] = Problem2$coefficients[1]+sum(Problem2$coefficients[-1]*(Testing[,i]))}
Test.yhat = round(Test.yhat)
Test.error = sum(ZipTest$V1==Test.yhat)/length(ZipTest$V1)
return(Test.error)}
error.for.test(ZipTrain)
error.for.test(ZipTest)
library("FNN")
k.error.train.test = function(k){
Train.error.k = sum(ZipTrain$V1==as.numeric(knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k =k)))/length(ZipTrain$V1)
Test.error.k = sum(ZipTest$V1==as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k =k)))/length(ZipTest$V1)
return(data.frame(Train.error.k, Test.error.k))
}
k.error.train.test(1)
k.error.train.test(3)
k.error.train.test(5)
k.error.train.test(7)
k.error.train.test(15)
k.error.train.test(1)
k.error.train.test(3)
k.error.train.test(5)
k.error.train.test(7)
k.error.train.test(15)
?knn
knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k = 1)
knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k = 3)
knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = 1)
as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = 1))
aa = as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = 1))
aa[aa==1] =2
aa[aa==2] =3
sum(ZipTest$V1==aa)
sum(ZipTest$V1==aa)/length(ZipTest$V1)
class(ZipTrain$V1)
ZipTrain$V1
?knn
?mode
install.packages("kknn")
knearest <- function(x, datax, datay, k)
{
neighbor.indices = sort(sapply(datax - x, l2dist), index.return = TRUE)
k.nearest = neighbor.indices$ix[1:k]
mean(datay[k.nearest])
}
n = 10
data.xpoints = runif(n, 0, 1)
data.xpoints
data.ypoints = sapply(data.xpoints, regf) + rnorm(n)
knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = 3)
as.numeric(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = 3))
class(knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = 3))
aa = (knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = 3))
ZipTest$V1 == aa
library("FNN")
k.error.train.test = function(k){
Train.error.k = sum(ZipTrain$V1==knn(ZipTrain[,-1], ZipTrain[, -1], ZipTrain$V1, k = k))/length(ZipTrain$V1)
Test.error.k = sum(ZipTest$V1==knn(ZipTrain[,-1], ZipTest[, -1], ZipTrain$V1, k = k))/length(ZipTest$V1)
return(data.frame(Train.error.k, Test.error.k))
}
k.error.train.test(1)
k.error.train.test(3)
k.error.train.test(5)
k.error.train.test(7)
k.error.train.test(15)
error.for.test(ZipTrain)
error.for.test(ZipTest)
X = rnorm(30, 0,1)
Y = 0 + 1*X + 2*X^2 + 3*X^3 + rnorm(30, 0, 1)
X.lm = lm(Y~1+X+I(X^2)+I(X^3))
X.lm
#  Coefficients:
# (Intercept)            X       I(X^2)       I(X^3)
#      51.421       -1.154        2.030        3.000
X.Sum.lm = summary(X.lm)
X.Sum.lm
# Call:
#   lm(formula = Y ~ 1 + X + I(X^2) + I(X^3))
#
# Residuals:
#   Min      1Q  Median      3Q     Max
# -1.6499 -0.4746 -0.1368  0.5540  1.3134
#
# Coefficients:
#   Estimate Std. Error t value Pr(>|t|)
# (Intercept)  0.06983    0.15975   0.437  0.66561
# X            0.87570    0.28053   3.122  0.00437 **
#   I(X^2)       2.15108    0.11686  18.407  < 2e-16 ***
#   I(X^3)       2.98545    0.08381  35.620  < 2e-16 ***
#   ---
#   Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1
#
# Residual standard error: 0.7275 on 26 degrees of freedom
# Multiple R-squared:  0.9953,  Adjusted R-squared:  0.9947
# F-statistic:  1820 on 3 and 26 DF,  p-value: < 2.2e-16
errors = X.Sum.lm$coefficients[,1]
plot(X, Y, pch = 20)
y = X^3*X.lm$coefficients[4] + X^2*X.lm$coefficients[3] + (X)*X.lm$coefficients[2] + 1*X.lm$coefficients[1]
X.x = X[order(X)]
y = y[order(X)]
points(X.x, y, type="l", col = "red")
CI.X.lm = predict(X.lm, data.frame(X.x,y), interval="confidence")
upper.CI = 1.96*(CI.X.lm[,3]-CI.X.lm[,1]) + CI.X.lm[,1]
lower.CI = 1.96*(CI.X.lm[,2]-CI.X.lm[,1]) + CI.X.lm[,1]
points(X.x, upper.CI[order(X)],type="l", col = "blue")
points(X.x, lower.CI[order(X)],type="l", col = "blue")
beta.error.upper = X^3*(X.lm$coefficients[4]+1.96*errors[4])
+ X^2*(X.lm$coefficients[3]+1.96*errors[3]) + (X)*(X.lm$coefficients[2]+1.96*errors[2]) +
1*(X.lm$coefficients[1]+1.96*errors[1])
points(X.x, beta.error.upper[order(X)],type="l", col = "green")
beta.error.lower = X^3*(X.lm$coefficients[4]-1.96*errors[4])
+ X^2*(X.lm$coefficients[3]-1.96*errors[3]) + (X)*(X.lm$coefficients[2]-1.96*errors[2]) +
1*(X.lm$coefficients[1]-1.96*errors[1])
points(X.x, beta.error.lower[order(X)],type="l", col = "green")
beta.error.upper = X^3*(X.lm$coefficients[4]+1.96*errors[4])
+ X^2*(X.lm$coefficients[3]+1.96*errors[3]) + (X)*(X.lm$coefficients[2]+1.96*errors[2]) +
1*(X.lm$coefficients[1]+1.96*errors[1])
points(X.x, beta.error.upper[order(X)],type="l", col = "green")
beta.error.lower = X^3*(X.lm$coefficients[4]-1.96*errors[4])
+ X^2*(X.lm$coefficients[3]-1.96*errors[3]) + (X)*(X.lm$coefficients[2]-1.96*errors[2]) +
1*(X.lm$coefficients[1]-1.96*errors[1])
points(X.x, beta.error.lower[order(X)],type="l", col = "green")
X = rnorm(30, 0,1)
Y = 0 + 1*X + 2*X^2 + 3*X^3 + rnorm(30, 0, 1)
X.lm = lm(Y~1+X+I(X^2)+I(X^3))
X.lm
X.Sum.lm = summary(X.lm)
X.Sum.lm
errors = X.Sum.lm$coefficients[,1]
plot(X, Y, pch = 20)
y = X^3*X.lm$coefficients[4] + X^2*X.lm$coefficients[3] + (X)*X.lm$coefficients[2] + 1*X.lm$coefficients[1]
X.x = X[order(X)]
y = y[order(X)]
points(X.x, y, type="l", col = "red")
CI.X.lm = predict(X.lm, data.frame(X.x,y), interval="confidence")
upper.CI = 1.96*(CI.X.lm[,3]-CI.X.lm[,1]) + CI.X.lm[,1]
lower.CI = 1.96*(CI.X.lm[,2]-CI.X.lm[,1]) + CI.X.lm[,1]
points(X.x, upper.CI[order(X)],type="l", col = "blue")
points(X.x, lower.CI[order(X)],type="l", col = "blue")
?qchisq
qchisq(1-0.025, 5)
upper.CI = qchisq(1-0.025, 5)*(CI.X.lm[,3]-CI.X.lm[,1]) + CI.X.lm[,1]
lower.CI = qchisq(1-0.025, 5)*(CI.X.lm[,2]-CI.X.lm[,1]) + CI.X.lm[,1]
points(X.x, upper.CI[order(X)],type="l", col = "green")
points(X.x, lower.CI[order(X)],type="l", col = "green")
